generator kysely {
  provider = "prisma-kysely"
  output   = "../src/types"
  fileName = "database.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String              @id @default(dbgenerated("gen_random_uuid()"))
  email                        String              @unique
  phone                        String              @unique
  firstname                    String
  lastname                     String
  dateOfBirth                  DateTime?           @db.Date
  sex                          String?
  height                       String?
  weight                       Decimal?            @db.Decimal(9, 2)
  subscriptionStatus           SubscriptionStatus?
  activityLevel                String?
  healthCondition              String?
  requiredCalorie              Float?
  hasUsedFreeMealPlan          Boolean             @default(false)
  isCreateMealPlanReminderSent Boolean             @default(false)
  createdAt                    DateTime            @default(now())
  updatedAt                    DateTime            @updatedAt
  Subscription                 Subscription[]
  Card                         Card[]
  Transaction                  Transaction[]
  UserMealPlan                 UserMealPlan[]
}

model Card {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  token        String        @unique
  email        String
  first6Digits String
  last4Digits  String
  issuer       String
  type         String
  processor    String
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  Transaction  Transaction[]
}

model Transaction {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reference String   @unique @default(dbgenerated("gen_random_uuid()"))
  status    String
  amount    Decimal  @db.Decimal(9, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
}

model SubscriptionPlan {
  id                            String         @id @default(dbgenerated("gen_random_uuid()"))
  planName                      String
  amount                        Decimal        @db.Decimal(9, 2)
  isSpecialPlan                 Boolean        @default(false)
  hasCalorieCalculator          Boolean
  timetablePerMonth             Int
  noOfRecipes                   String
  mealPlanGuideLines            Boolean
  hasPreventHungerResources     Boolean
  hasMealPreppingResources      Boolean
  hasHandlingCheatMealResources Boolean
  hasPostPurchaseSupport        Boolean
  hasQuickMealOptions           Boolean
  hasProgressReport             Boolean
  createdAt                     DateTime       @default(now())
  updatedAt                     DateTime       @updatedAt
  Subscription                  Subscription[]
}

model Subscription {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  transactionId      String
  subscriptionPlanId String
  subscriptionPlan   SubscriptionPlan   @relation(fields: [subscriptionPlanId], references: [id])
  status             SubscriptionStatus
  startDate          DateTime           @default(now()) @db.Timestamptz()
  endDate            DateTime           @db.Timestamptz()
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model FoodItem {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  name              String
  category          FoodCategory
  hasParts          Boolean       @default(false)
  hasCookingMethods Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  FoodVariant       FoodVariant[]
}

model FoodVariant {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  foodId      String
  food        FoodItem      @relation(fields: [foodId], references: [id])
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  FoodPortion FoodPortion[]
}

model FoodPortion {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  foodVariantId String
  foodVariant   FoodVariant @relation(fields: [foodVariantId], references: [id])
  calorie       String
  size          String
  description   String?
  createdAt     DateTime    @default(now())
}

model CalorieNeed {
  id       String     @id @default(dbgenerated("gen_random_uuid()"))
  calories Int
  planNo   Int        @default(1)
  MealPlan MealPlan[]
}

model MealPlan {
  id                String      @id @default(dbgenerated("gen_random_uuid()"))
  day               String
  breakfast         String
  breakfastCalories Int
  snackCalories     Int
  lunch             String
  lunchCalories     Int
  dinner            String
  dinnerCalories    Int
  calorieNeed       CalorieNeed @relation(fields: [calorieNeedId], references: [id])
  calorieNeedId     String
}

model UserMealPlan {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  plan      String
  startDate DateTime @default(now()) @db.Timestamptz()
  endDate   DateTime @db.Date
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Snack {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  snack     String
  calories  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  servings     Int
  ingredients  String[]
  instructions String[]
  totalCalorie Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum SubscriptionStatus {
  active
  expired
  canceled
}

enum FoodCategory {
  Starch
  Fruits
  Protein
  Fat_and_Oil
  Snacks
  Milk_and_Yoghurt
  Drinks
}
