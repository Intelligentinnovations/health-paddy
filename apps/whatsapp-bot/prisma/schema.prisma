generator kysely {
  provider = "prisma-kysely"
  output   = "../src/types"
  fileName = "database.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  email              String              @unique
  phone              String              @unique
  name               String
  age                Int?
  sex                String?
  height             String?
  weight             Decimal?            @db.Decimal(9, 2)
  subscriptionStatus SubscriptionStatus?
  activityLevel      String?
  healthCondition    String?
  requiredCalorie    Float?
  hasUsedFreeTrial   Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Subscription       Subscription[]
  Card               Card[]
  Transaction        Transaction[]
  UserMealPlan       UserMealPlan[]
}

model Card {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  token        String        @unique
  email        String
  first6Digits String
  last4Digits  String
  issuer       String
  type         String
  processor    String
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  Transaction  Transaction[]
}

model Transaction {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reference String   @unique @default(dbgenerated("gen_random_uuid()"))
  status    String
  amount    Decimal  @db.Decimal(9, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
}

model Subscription {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  transactionId String
  status        SubscriptionStatus
  startDate     DateTime           @default(now()) @db.Timestamptz()
  endDate       DateTime           @db.Timestamptz()
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model FoodItems {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  calorie     Int
  portion     String
  category    FoodCategory
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model CalorieNeed {
  id       String     @id @default(dbgenerated("gen_random_uuid()"))
  calories Int
  planNo   Int        @default(1)
  MealPlan MealPlan[]
}

model MealPlan {
  id                String      @id @default(dbgenerated("gen_random_uuid()"))
  day               String
  breakfast         String
  breakfastCalories Int
  snackCalories     Int
  lunch             String
  lunchCalories     Int
  dinner            String
  dinnerCalories    Int
  calorieNeed       CalorieNeed @relation(fields: [calorieNeedId], references: [id])
  calorieNeedId     String
}

model UserMealPlan {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  plan      String
  startDate DateTime @default(now()) @db.Timestamptz()
  endDate   DateTime @db.Date
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Snack {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  snack     String
  calories  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  servings     Int
  ingredients  String[]
  instructions String[]
  totalCalorie Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum SubscriptionStatus {
  active
  expired
  canceled
}

enum FoodCategory {
  starch
  fruit
  vegetable
  milk
  protein
  fat_and_oil
  snack
}
